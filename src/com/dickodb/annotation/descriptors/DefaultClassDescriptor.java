package com.dickodb.annotation.descriptors;

import com.dickodb.annotation.resolvers.RelationResolver;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class DefaultClassDescriptor {
    private ArrayList<ColumnDescriptor> simpleColumns;
    private ArrayList<OneToManyDescriptor> onetomanys;
    private ArrayList<ManyToOneDescriptor> manytoones;
    private ArrayList<KeyDescriptor> keys;
    private String table;

    public DefaultClassDescriptor(){
        simpleColumns = new ArrayList<>();
        onetomanys = new ArrayList<>();
        manytoones = new ArrayList<>();
        keys = new ArrayList<>();
    }


    public void setSimpleColumns(ArrayList<ColumnDescriptor> simpleColumns) {
        this.simpleColumns = simpleColumns;
    }

    public void setOnetomanys(ArrayList<OneToManyDescriptor> onetomanys) {
        this.onetomanys = onetomanys;
    }

    public void setManytoones(ArrayList<ManyToOneDescriptor> manytoones) {
        this.manytoones = manytoones;
    }

    public void setKeys(ArrayList<KeyDescriptor> keys) {
        this.keys = keys;
    }

    public ArrayList<ColumnDescriptor> getSimpleColumns() {
        return simpleColumns;
    }

    public ArrayList<OneToManyDescriptor> getOnetomanys() {
        return onetomanys;
    }

    public ArrayList<ManyToOneDescriptor> getManytoones() {
        return manytoones;
    }

    public ArrayList<KeyDescriptor> getKeys() {
        return keys;
    }

    public String getTable() {
        return table;
    }

    public void setTable(String table) {
        this.table = table;
    }



    public Map<String, Object> getPersistFields(Object object){
        Class<?> cl = object.getClass();

        Map<String, Object> fields = new HashMap<>();

        try {

            for(KeyDescriptor descriptor: this.keys){
                if (!descriptor.isAutoGenerated()){
                    Field field = cl.getDeclaredField(descriptor.getFieldName());
                    field.setAccessible(true);
                    fields.put(descriptor.getName(), field.get(object));
                }
            }

            for (ColumnDescriptor descriptor: this.simpleColumns){

                Field field = cl.getDeclaredField(descriptor.getFieldName());
                field.setAccessible(true);
                fields.put(descriptor.getName(), field.get(object));

            }


            for (ManyToOneDescriptor mto: manytoones){

                fields.put(mto.getJoinColumn(), RelationResolver.resolve(mto, object));

            }


        } catch (NoSuchFieldException | IllegalAccessException | ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
            System.exit(0);
        }

        return fields;
    }

}
